{"version":3,"sources":["Card.js","Cardlist.js","Form.js","App.js","serviceWorker.js","index.js"],"names":["Card","state","profile","this","props","className","style","margin","src","avatar_url","alt","display","marginLeft","fontSize","name","company","Component","CardList","profiles","map","key","id","Form","userName","handleSubmite","event","a","preventDefault","axios","get","resp","onSubmite","data","setState","onSubmit","type","value","onChange","target","placeholder","App","testData","addNewProfile","profileData","prevState","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oSAmBeA,E,2MAhBXC,MAAQ,G,wEAEJ,IAAMC,EAAUC,KAAKC,MACrB,OACK,yBAAKC,UAAU,iBAAiBC,MAAO,CAAEC,OAAO,SACjD,yBAAKC,IAAKN,EAAQO,WAAYC,IAAI,gBAClC,yBAAKJ,MAAO,CAACK,QAAQ,eAAeC,WAAW,IAAKP,UAAU,QAC1D,yBAAKA,UAAU,OAAOC,MAAO,CAAEO,SAAW,SAAUX,EAAQY,MAC5D,yBAAKT,UAAU,WAAWH,EAAQa,e,GAT/BC,aCOJC,EANE,SAACb,GACd,OAAS,6BACJA,EAAMc,SAASC,IAAI,SAAAjB,GAAO,OAAK,kBAAC,EAAD,eAAMkB,IAAKlB,EAAQmB,IAAQnB,Q,iDCkBpDoB,E,2MAnBXrB,MAAQ,CAAEsB,SAAW,I,EACrBC,c,sCAAgB,WAAOC,GAAP,eAAAC,EAAA,4DACZD,EAAME,iBADM,SAEOC,IAAMC,IAAN,uCAA0C,EAAK5B,MAAMsB,WAF5D,OAENO,EAFM,OAGZ,EAAK1B,MAAM2B,UAAUD,EAAKE,MAC1B,EAAKC,SAAS,CAACV,SAAS,KAJZ,yC,8HAON,IAAD,OACL,OACI,0BAAMW,SAAU/B,KAAKqB,eACjB,2BAAOW,KAAK,OAAOC,MAAOjC,KAAKF,MAAMsB,SAAUc,SAAU,SAAAZ,GAAK,OAAI,EAAKQ,SAAS,CAACV,SAAWE,EAAMa,OAAOF,SACzGG,YAAY,qBACZ,iD,GAdGvB,aCqBJwB,E,2MAlBbvC,MAAQ,CACNwC,SAAW,I,EAEZC,cAAgB,SAACC,GACf,EAAKV,SAAS,SAAAW,GAAS,MAAK,CAC1BH,SAAS,GAAD,mBAAKG,EAAUH,UAAf,CAAwBE,Q,wEAInC,OAAS,yBAAKtC,UAAU,OACxB,kBAAC,EAAD,CAAM0B,UAAW5B,KAAKuC,gBACtB,oDACA,kBAAC,EAAD,CAAUxB,SAAUf,KAAKF,MAAMwC,gB,GAbjBzB,aCOE6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.6e0658c2.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Card extends Component {\n    state = {  }\n    render() { \n        const profile = this.props\n        return (\n             <div className=\"github-profile\" style={{ margin:'1rem' }}>\n            <img src={profile.avatar_url} alt=\"profile Pic\"/>\n            <div style={{display:'inline-block',marginLeft:10}} className=\"info\">\n                <div className=\"name\" style={{ fontSize : '125%'}}>{profile.name}</div>\n                <div className=\"company\">{profile.company}</div>\n            </div>\n\n        </div> \n        );\n    }\n}\n \nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = (props) => {\n    return ( <div>\n        {props.profiles.map(profile => (<Card key={profile.id} {...profile} />))}\n    </div> );\n}\n \nexport default CardList;","import React, { Component } from 'react';\nimport axios from 'axios';\n\nclass Form extends Component {\n    state = { userName : '' }\n    handleSubmite = async (event) => {\n        event.preventDefault();\n        const resp = await axios.get(`https://api.github.com/users/${this.state.userName}`)\n        this.props.onSubmite(resp.data)\n        this.setState({userName:''})\n    }\n  \n    render() { \n        return ( \n            <form onSubmit={this.handleSubmite}>\n                <input type=\"text\" value={this.state.userName} onChange={event => this.setState({userName : event.target.value})}\n                placeholder=\"Github User Name\"/>\n                <button>Add Card</button>\n            </form>\n         );\n    }\n}\n \nexport default Form;","import React, { Component } from 'react';\nimport CardList from \"./Cardlist\";\nimport './App.css';\nimport Form from './Form'\n \nclass App extends Component {\n  state = { \n    testData : [],\n   }\n   addNewProfile = (profileData) => {\n     this.setState(prevState => ({\n       testData:[...prevState.testData,profileData]\n     }))\n   }\n  render() { \n    return ( <div className=\"App\">\n    <Form onSubmite={this.addNewProfile} />\n    <h1>The Github Cards App</h1>\n    <CardList profiles={this.state.testData} />\n    \n  </div> );\n  }\n}\n \nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}